// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Laboratory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Laboratory;

public class Point implements java.lang.Cloneable, java.io.Serializable
{
    public int x;

    public int y;

    public Point()
    {
    }

    public Point(int x, int y)
    {
        this.x = x;
        this.y = y;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Point _r = null;
        if(rhs instanceof Point)
        {
            _r = (Point)rhs;
        }

        if(_r != null)
        {
            if(x != _r.x)
            {
                return false;
            }
            if(y != _r.y)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Laboratory::Point");
        __h = IceInternal.HashUtil.hashAdd(__h, x);
        __h = IceInternal.HashUtil.hashAdd(__h, y);
        return __h;
    }

    public Point
    clone()
    {
        Point c = null;
        try
        {
            c = (Point)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(x);
        __os.writeInt(y);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        x = __is.readInt();
        y = __is.readInt();
    }

    static public void
    __write(IceInternal.BasicStream __os, Point __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public Point
    __read(IceInternal.BasicStream __is, Point __v)
    {
        if(__v == null)
        {
             __v = new Point();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final Point __nullMarshalValue = new Point();

    public static final long serialVersionUID = -543846971L;
}
