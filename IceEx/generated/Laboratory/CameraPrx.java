// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Laboratory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Laboratory;

public interface CameraPrx extends DevicePrx
{
    public void setZoom(int zoom)
        throws ZoomOutOfRangeException;

    public void setZoom(int zoom, java.util.Map<String, String> __ctx)
        throws ZoomOutOfRangeException;

    public Ice.AsyncResult begin_setZoom(int zoom);

    public Ice.AsyncResult begin_setZoom(int zoom, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setZoom(int zoom, Ice.Callback __cb);

    public Ice.AsyncResult begin_setZoom(int zoom, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setZoom(int zoom, Callback_Camera_setZoom __cb);

    public Ice.AsyncResult begin_setZoom(int zoom, java.util.Map<String, String> __ctx, Callback_Camera_setZoom __cb);

    public Ice.AsyncResult begin_setZoom(int zoom, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_setZoom(int zoom, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_setZoom(int zoom, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_setZoom(int zoom, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb);

    public void end_setZoom(Ice.AsyncResult __result)
        throws ZoomOutOfRangeException;

    public void rotateLeft(float angle)
        throws RotationOutOfRangeException;

    public void rotateLeft(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException;

    public Ice.AsyncResult begin_rotateLeft(float angle);

    public Ice.AsyncResult begin_rotateLeft(float angle, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_rotateLeft(float angle, Ice.Callback __cb);

    public Ice.AsyncResult begin_rotateLeft(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_rotateLeft(float angle, Callback_Camera_rotateLeft __cb);

    public Ice.AsyncResult begin_rotateLeft(float angle, java.util.Map<String, String> __ctx, Callback_Camera_rotateLeft __cb);

    public Ice.AsyncResult begin_rotateLeft(float angle, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_rotateLeft(float angle, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_rotateLeft(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_rotateLeft(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb);

    public void end_rotateLeft(Ice.AsyncResult __result)
        throws RotationOutOfRangeException;

    public void rotateRight(float angle)
        throws RotationOutOfRangeException;

    public void rotateRight(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException;

    public Ice.AsyncResult begin_rotateRight(float angle);

    public Ice.AsyncResult begin_rotateRight(float angle, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_rotateRight(float angle, Ice.Callback __cb);

    public Ice.AsyncResult begin_rotateRight(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_rotateRight(float angle, Callback_Camera_rotateRight __cb);

    public Ice.AsyncResult begin_rotateRight(float angle, java.util.Map<String, String> __ctx, Callback_Camera_rotateRight __cb);

    public Ice.AsyncResult begin_rotateRight(float angle, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_rotateRight(float angle, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_rotateRight(float angle, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_rotateRight(float angle, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb);

    public void end_rotateRight(Ice.AsyncResult __result)
        throws RotationOutOfRangeException;

    public void rotateTop(float angle)
        throws RotationOutOfRangeException;

    public void rotateTop(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException;

    public Ice.AsyncResult begin_rotateTop(float angle);

    public Ice.AsyncResult begin_rotateTop(float angle, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_rotateTop(float angle, Ice.Callback __cb);

    public Ice.AsyncResult begin_rotateTop(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_rotateTop(float angle, Callback_Camera_rotateTop __cb);

    public Ice.AsyncResult begin_rotateTop(float angle, java.util.Map<String, String> __ctx, Callback_Camera_rotateTop __cb);

    public Ice.AsyncResult begin_rotateTop(float angle, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_rotateTop(float angle, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_rotateTop(float angle, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_rotateTop(float angle, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb);

    public void end_rotateTop(Ice.AsyncResult __result)
        throws RotationOutOfRangeException;

    public void rotateDown(float angle)
        throws RotationOutOfRangeException;

    public void rotateDown(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException;

    public Ice.AsyncResult begin_rotateDown(float angle);

    public Ice.AsyncResult begin_rotateDown(float angle, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_rotateDown(float angle, Ice.Callback __cb);

    public Ice.AsyncResult begin_rotateDown(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_rotateDown(float angle, Callback_Camera_rotateDown __cb);

    public Ice.AsyncResult begin_rotateDown(float angle, java.util.Map<String, String> __ctx, Callback_Camera_rotateDown __cb);

    public Ice.AsyncResult begin_rotateDown(float angle, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_rotateDown(float angle, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_rotateDown(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_rotateDown(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb);

    public void end_rotateDown(Ice.AsyncResult __result)
        throws RotationOutOfRangeException;
}
