// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Laboratory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Laboratory;

/**
 * Provides type-specific helper functions.
 **/
public final class VariableFocalLenCameraPrxHelper extends Ice.ObjectPrxHelperBase implements VariableFocalLenCameraPrx
{
    private static final String __rotateDown_name = "rotateDown";

    public void rotateDown(float angle)
        throws RotationOutOfRangeException
    {
        rotateDown(angle, null, false);
    }

    public void rotateDown(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException
    {
        rotateDown(angle, __ctx, true);
    }

    private void rotateDown(float angle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RotationOutOfRangeException
    {
        __checkTwowayOnly(__rotateDown_name);
        end_rotateDown(begin_rotateDown(angle, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_rotateDown(float angle)
    {
        return begin_rotateDown(angle, null, false, false, null);
    }

    public Ice.AsyncResult begin_rotateDown(float angle, java.util.Map<String, String> __ctx)
    {
        return begin_rotateDown(angle, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_rotateDown(float angle, Ice.Callback __cb)
    {
        return begin_rotateDown(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rotateDown(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rotateDown(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rotateDown(float angle, Callback_Camera_rotateDown __cb)
    {
        return begin_rotateDown(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rotateDown(float angle, java.util.Map<String, String> __ctx, Callback_Camera_rotateDown __cb)
    {
        return begin_rotateDown(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rotateDown(float angle, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rotateDown(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rotateDown(float angle, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateDown(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_rotateDown(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rotateDown(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rotateDown(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateDown(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_rotateDown(float angle, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateDown(angle, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            VariableFocalLenCameraPrxHelper.__rotateDown_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_rotateDown(float angle, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rotateDown_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__rotateDown_name, __cb);
        try
        {
            __result.prepare(__rotateDown_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(angle);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_rotateDown(Ice.AsyncResult __iresult)
        throws RotationOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __rotateDown_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(RotationOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __rotateDown_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Laboratory.CameraPrx __proxy = (Laboratory.CameraPrx)__result.getProxy();
        try
        {
            __proxy.end_rotateDown(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __rotateLeft_name = "rotateLeft";

    public void rotateLeft(float angle)
        throws RotationOutOfRangeException
    {
        rotateLeft(angle, null, false);
    }

    public void rotateLeft(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException
    {
        rotateLeft(angle, __ctx, true);
    }

    private void rotateLeft(float angle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RotationOutOfRangeException
    {
        __checkTwowayOnly(__rotateLeft_name);
        end_rotateLeft(begin_rotateLeft(angle, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_rotateLeft(float angle)
    {
        return begin_rotateLeft(angle, null, false, false, null);
    }

    public Ice.AsyncResult begin_rotateLeft(float angle, java.util.Map<String, String> __ctx)
    {
        return begin_rotateLeft(angle, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_rotateLeft(float angle, Ice.Callback __cb)
    {
        return begin_rotateLeft(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rotateLeft(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rotateLeft(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rotateLeft(float angle, Callback_Camera_rotateLeft __cb)
    {
        return begin_rotateLeft(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rotateLeft(float angle, java.util.Map<String, String> __ctx, Callback_Camera_rotateLeft __cb)
    {
        return begin_rotateLeft(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rotateLeft(float angle, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rotateLeft(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rotateLeft(float angle, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateLeft(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_rotateLeft(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rotateLeft(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rotateLeft(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateLeft(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_rotateLeft(float angle, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateLeft(angle, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            VariableFocalLenCameraPrxHelper.__rotateLeft_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_rotateLeft(float angle, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rotateLeft_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__rotateLeft_name, __cb);
        try
        {
            __result.prepare(__rotateLeft_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(angle);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_rotateLeft(Ice.AsyncResult __iresult)
        throws RotationOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __rotateLeft_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(RotationOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __rotateLeft_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Laboratory.CameraPrx __proxy = (Laboratory.CameraPrx)__result.getProxy();
        try
        {
            __proxy.end_rotateLeft(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __rotateRight_name = "rotateRight";

    public void rotateRight(float angle)
        throws RotationOutOfRangeException
    {
        rotateRight(angle, null, false);
    }

    public void rotateRight(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException
    {
        rotateRight(angle, __ctx, true);
    }

    private void rotateRight(float angle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RotationOutOfRangeException
    {
        __checkTwowayOnly(__rotateRight_name);
        end_rotateRight(begin_rotateRight(angle, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_rotateRight(float angle)
    {
        return begin_rotateRight(angle, null, false, false, null);
    }

    public Ice.AsyncResult begin_rotateRight(float angle, java.util.Map<String, String> __ctx)
    {
        return begin_rotateRight(angle, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_rotateRight(float angle, Ice.Callback __cb)
    {
        return begin_rotateRight(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rotateRight(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rotateRight(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rotateRight(float angle, Callback_Camera_rotateRight __cb)
    {
        return begin_rotateRight(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rotateRight(float angle, java.util.Map<String, String> __ctx, Callback_Camera_rotateRight __cb)
    {
        return begin_rotateRight(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rotateRight(float angle, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rotateRight(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rotateRight(float angle, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateRight(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_rotateRight(float angle, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rotateRight(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rotateRight(float angle, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateRight(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_rotateRight(float angle, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateRight(angle, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             VariableFocalLenCameraPrxHelper.__rotateRight_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_rotateRight(float angle, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rotateRight_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__rotateRight_name, __cb);
        try
        {
            __result.prepare(__rotateRight_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(angle);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_rotateRight(Ice.AsyncResult __iresult)
        throws RotationOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __rotateRight_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(RotationOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __rotateRight_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Laboratory.CameraPrx __proxy = (Laboratory.CameraPrx)__result.getProxy();
        try
        {
            __proxy.end_rotateRight(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __rotateTop_name = "rotateTop";

    public void rotateTop(float angle)
        throws RotationOutOfRangeException
    {
        rotateTop(angle, null, false);
    }

    public void rotateTop(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException
    {
        rotateTop(angle, __ctx, true);
    }

    private void rotateTop(float angle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RotationOutOfRangeException
    {
        __checkTwowayOnly(__rotateTop_name);
        end_rotateTop(begin_rotateTop(angle, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_rotateTop(float angle)
    {
        return begin_rotateTop(angle, null, false, false, null);
    }

    public Ice.AsyncResult begin_rotateTop(float angle, java.util.Map<String, String> __ctx)
    {
        return begin_rotateTop(angle, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_rotateTop(float angle, Ice.Callback __cb)
    {
        return begin_rotateTop(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rotateTop(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rotateTop(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rotateTop(float angle, Callback_Camera_rotateTop __cb)
    {
        return begin_rotateTop(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rotateTop(float angle, java.util.Map<String, String> __ctx, Callback_Camera_rotateTop __cb)
    {
        return begin_rotateTop(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rotateTop(float angle, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rotateTop(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rotateTop(float angle, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateTop(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_rotateTop(float angle, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rotateTop(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rotateTop(float angle, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateTop(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_rotateTop(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rotateTop(angle, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           VariableFocalLenCameraPrxHelper.__rotateTop_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_rotateTop(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rotateTop_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__rotateTop_name, __cb);
        try
        {
            __result.prepare(__rotateTop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(angle);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_rotateTop(Ice.AsyncResult __iresult)
        throws RotationOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __rotateTop_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(RotationOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __rotateTop_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Laboratory.CameraPrx __proxy = (Laboratory.CameraPrx)__result.getProxy();
        try
        {
            __proxy.end_rotateTop(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __setZoom_name = "setZoom";

    public void setZoom(int zoom)
        throws ZoomOutOfRangeException
    {
        setZoom(zoom, null, false);
    }

    public void setZoom(int zoom, java.util.Map<String, String> __ctx)
        throws ZoomOutOfRangeException
    {
        setZoom(zoom, __ctx, true);
    }

    private void setZoom(int zoom, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ZoomOutOfRangeException
    {
        __checkTwowayOnly(__setZoom_name);
        end_setZoom(begin_setZoom(zoom, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_setZoom(int zoom)
    {
        return begin_setZoom(zoom, null, false, false, null);
    }

    public Ice.AsyncResult begin_setZoom(int zoom, java.util.Map<String, String> __ctx)
    {
        return begin_setZoom(zoom, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_setZoom(int zoom, Ice.Callback __cb)
    {
        return begin_setZoom(zoom, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setZoom(int zoom, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setZoom(zoom, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setZoom(int zoom, Callback_Camera_setZoom __cb)
    {
        return begin_setZoom(zoom, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setZoom(int zoom, java.util.Map<String, String> __ctx, Callback_Camera_setZoom __cb)
    {
        return begin_setZoom(zoom, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setZoom(int zoom, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setZoom(zoom, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setZoom(int zoom, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setZoom(zoom, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_setZoom(int zoom, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setZoom(zoom, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setZoom(int zoom, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setZoom(zoom, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_setZoom(int zoom, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setZoom(zoom, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         VariableFocalLenCameraPrxHelper.__setZoom_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_setZoom(int zoom, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setZoom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__setZoom_name, __cb);
        try
        {
            __result.prepare(__setZoom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(zoom);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_setZoom(Ice.AsyncResult __iresult)
        throws ZoomOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __setZoom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(ZoomOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __setZoom_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Laboratory.CameraPrx __proxy = (Laboratory.CameraPrx)__result.getProxy();
        try
        {
            __proxy.end_setZoom(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __getDeviceFunctions_name = "getDeviceFunctions";

    public java.util.List<java.lang.String> getDeviceFunctions()
    {
        return getDeviceFunctions(null, false);
    }

    public java.util.List<java.lang.String> getDeviceFunctions(java.util.Map<String, String> __ctx)
    {
        return getDeviceFunctions(__ctx, true);
    }

    private java.util.List<java.lang.String> getDeviceFunctions(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getDeviceFunctions_name);
        return end_getDeviceFunctions(begin_getDeviceFunctions(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getDeviceFunctions()
    {
        return begin_getDeviceFunctions(null, false, false, null);
    }

    public Ice.AsyncResult begin_getDeviceFunctions(java.util.Map<String, String> __ctx)
    {
        return begin_getDeviceFunctions(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getDeviceFunctions(Ice.Callback __cb)
    {
        return begin_getDeviceFunctions(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDeviceFunctions(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDeviceFunctions(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDeviceFunctions(Callback_Device_getDeviceFunctions __cb)
    {
        return begin_getDeviceFunctions(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDeviceFunctions(java.util.Map<String, String> __ctx, Callback_Device_getDeviceFunctions __cb)
    {
        return begin_getDeviceFunctions(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDeviceFunctions(IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDeviceFunctions(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDeviceFunctions(IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDeviceFunctions(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getDeviceFunctions(java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDeviceFunctions(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDeviceFunctions(java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDeviceFunctions(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getDeviceFunctions(java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDeviceFunctions(__ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackArg1<java.util.List<java.lang.String>>(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    VariableFocalLenCameraPrxHelper.__getDeviceFunctions_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_getDeviceFunctions(java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDeviceFunctions_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getDeviceFunctions_name, __cb);
        try
        {
            __result.prepare(__getDeviceFunctions_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public java.util.List<java.lang.String> end_getDeviceFunctions(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getDeviceFunctions_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            java.util.List<java.lang.String> __ret;
            __ret = StringListHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getDeviceFunctions_completed(Ice.TwowayCallbackArg1<java.util.List<java.lang.String>> __cb, Ice.AsyncResult __result)
    {
        Laboratory.DevicePrx __proxy = (Laboratory.DevicePrx)__result.getProxy();
        java.util.List<java.lang.String> __ret = null;
        try
        {
            __ret = __proxy.end_getDeviceFunctions(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getState_name = "getState";

    public String getState()
    {
        return getState(null, false);
    }

    public String getState(java.util.Map<String, String> __ctx)
    {
        return getState(__ctx, true);
    }

    private String getState(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getState_name);
        return end_getState(begin_getState(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getState()
    {
        return begin_getState(null, false, false, null);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx)
    {
        return begin_getState(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getState(Ice.Callback __cb)
    {
        return begin_getState(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getState(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getState(Callback_Device_getState __cb)
    {
        return begin_getState(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Callback_Device_getState __cb)
    {
        return begin_getState(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getState(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getState(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getState(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getState(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getState(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getState(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getState(__ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          VariableFocalLenCameraPrxHelper.__getState_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getState_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getState_name, __cb);
        try
        {
            __result.prepare(__getState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getState(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getState_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getState_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        Laboratory.DevicePrx __proxy = (Laboratory.DevicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getState(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __decreaseFocalLength_name = "decreaseFocalLength";

    public void decreaseFocalLength(float focalLength)
        throws FocalLengthOutOfRangeException
    {
        decreaseFocalLength(focalLength, null, false);
    }

    public void decreaseFocalLength(float focalLength, java.util.Map<String, String> __ctx)
        throws FocalLengthOutOfRangeException
    {
        decreaseFocalLength(focalLength, __ctx, true);
    }

    private void decreaseFocalLength(float focalLength, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws FocalLengthOutOfRangeException
    {
        __checkTwowayOnly(__decreaseFocalLength_name);
        end_decreaseFocalLength(begin_decreaseFocalLength(focalLength, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_decreaseFocalLength(float focalLength)
    {
        return begin_decreaseFocalLength(focalLength, null, false, false, null);
    }

    public Ice.AsyncResult begin_decreaseFocalLength(float focalLength, java.util.Map<String, String> __ctx)
    {
        return begin_decreaseFocalLength(focalLength, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_decreaseFocalLength(float focalLength, Ice.Callback __cb)
    {
        return begin_decreaseFocalLength(focalLength, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_decreaseFocalLength(float focalLength, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_decreaseFocalLength(focalLength, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_decreaseFocalLength(float focalLength, Callback_VariableFocalLenCamera_decreaseFocalLength __cb)
    {
        return begin_decreaseFocalLength(focalLength, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_decreaseFocalLength(float focalLength, java.util.Map<String, String> __ctx, Callback_VariableFocalLenCamera_decreaseFocalLength __cb)
    {
        return begin_decreaseFocalLength(focalLength, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_decreaseFocalLength(float focalLength, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_decreaseFocalLength(focalLength, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_decreaseFocalLength(float focalLength, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_decreaseFocalLength(focalLength, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_decreaseFocalLength(float focalLength, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_decreaseFocalLength(focalLength, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_decreaseFocalLength(float focalLength, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_decreaseFocalLength(focalLength, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_decreaseFocalLength(float focalLength, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.Functional_VoidCallback __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_decreaseFocalLength(focalLength, __ctx, __explicitCtx, __synchronous, 
                                         new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                             {
                                                 public final void __completed(Ice.AsyncResult __result)
                                                 {
                                                     VariableFocalLenCameraPrxHelper.__decreaseFocalLength_completed(this, __result);
                                                 }
                                             });
    }

    private Ice.AsyncResult begin_decreaseFocalLength(float focalLength, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__decreaseFocalLength_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__decreaseFocalLength_name, __cb);
        try
        {
            __result.prepare(__decreaseFocalLength_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(focalLength);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_decreaseFocalLength(Ice.AsyncResult __iresult)
        throws FocalLengthOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __decreaseFocalLength_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(FocalLengthOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __decreaseFocalLength_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Laboratory.VariableFocalLenCameraPrx __proxy = (Laboratory.VariableFocalLenCameraPrx)__result.getProxy();
        try
        {
            __proxy.end_decreaseFocalLength(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __increaseFocalLength_name = "increaseFocalLength";

    public void increaseFocalLength(float focalLength)
        throws FocalLengthOutOfRangeException
    {
        increaseFocalLength(focalLength, null, false);
    }

    public void increaseFocalLength(float focalLength, java.util.Map<String, String> __ctx)
        throws FocalLengthOutOfRangeException
    {
        increaseFocalLength(focalLength, __ctx, true);
    }

    private void increaseFocalLength(float focalLength, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws FocalLengthOutOfRangeException
    {
        __checkTwowayOnly(__increaseFocalLength_name);
        end_increaseFocalLength(begin_increaseFocalLength(focalLength, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_increaseFocalLength(float focalLength)
    {
        return begin_increaseFocalLength(focalLength, null, false, false, null);
    }

    public Ice.AsyncResult begin_increaseFocalLength(float focalLength, java.util.Map<String, String> __ctx)
    {
        return begin_increaseFocalLength(focalLength, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_increaseFocalLength(float focalLength, Ice.Callback __cb)
    {
        return begin_increaseFocalLength(focalLength, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_increaseFocalLength(float focalLength, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_increaseFocalLength(focalLength, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_increaseFocalLength(float focalLength, Callback_VariableFocalLenCamera_increaseFocalLength __cb)
    {
        return begin_increaseFocalLength(focalLength, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_increaseFocalLength(float focalLength, java.util.Map<String, String> __ctx, Callback_VariableFocalLenCamera_increaseFocalLength __cb)
    {
        return begin_increaseFocalLength(focalLength, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_increaseFocalLength(float focalLength, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_increaseFocalLength(focalLength, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_increaseFocalLength(float focalLength, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_increaseFocalLength(focalLength, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_increaseFocalLength(float focalLength, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_increaseFocalLength(focalLength, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_increaseFocalLength(float focalLength, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_increaseFocalLength(focalLength, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_increaseFocalLength(float focalLength, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.Functional_VoidCallback __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_increaseFocalLength(focalLength, __ctx, __explicitCtx, __synchronous, 
                                         new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                             {
                                                 public final void __completed(Ice.AsyncResult __result)
                                                 {
                                                     VariableFocalLenCameraPrxHelper.__increaseFocalLength_completed(this, __result);
                                                 }
                                             });
    }

    private Ice.AsyncResult begin_increaseFocalLength(float focalLength, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__increaseFocalLength_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__increaseFocalLength_name, __cb);
        try
        {
            __result.prepare(__increaseFocalLength_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(focalLength);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_increaseFocalLength(Ice.AsyncResult __iresult)
        throws FocalLengthOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __increaseFocalLength_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(FocalLengthOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __increaseFocalLength_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Laboratory.VariableFocalLenCameraPrx __proxy = (Laboratory.VariableFocalLenCameraPrx)__result.getProxy();
        try
        {
            __proxy.end_increaseFocalLength(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __setFocalLength_name = "setFocalLength";

    public void setFocalLength(float focalLength)
        throws FocalLengthOutOfRangeException
    {
        setFocalLength(focalLength, null, false);
    }

    public void setFocalLength(float focalLength, java.util.Map<String, String> __ctx)
        throws FocalLengthOutOfRangeException
    {
        setFocalLength(focalLength, __ctx, true);
    }

    private void setFocalLength(float focalLength, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws FocalLengthOutOfRangeException
    {
        __checkTwowayOnly(__setFocalLength_name);
        end_setFocalLength(begin_setFocalLength(focalLength, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_setFocalLength(float focalLength)
    {
        return begin_setFocalLength(focalLength, null, false, false, null);
    }

    public Ice.AsyncResult begin_setFocalLength(float focalLength, java.util.Map<String, String> __ctx)
    {
        return begin_setFocalLength(focalLength, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_setFocalLength(float focalLength, Ice.Callback __cb)
    {
        return begin_setFocalLength(focalLength, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setFocalLength(float focalLength, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setFocalLength(focalLength, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setFocalLength(float focalLength, Callback_VariableFocalLenCamera_setFocalLength __cb)
    {
        return begin_setFocalLength(focalLength, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setFocalLength(float focalLength, java.util.Map<String, String> __ctx, Callback_VariableFocalLenCamera_setFocalLength __cb)
    {
        return begin_setFocalLength(focalLength, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setFocalLength(float focalLength, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setFocalLength(focalLength, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setFocalLength(float focalLength, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setFocalLength(focalLength, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_setFocalLength(float focalLength, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setFocalLength(focalLength, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setFocalLength(float focalLength, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setFocalLength(focalLength, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_setFocalLength(float focalLength, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setFocalLength(focalLength, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                VariableFocalLenCameraPrxHelper.__setFocalLength_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_setFocalLength(float focalLength, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setFocalLength_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__setFocalLength_name, __cb);
        try
        {
            __result.prepare(__setFocalLength_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(focalLength);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_setFocalLength(Ice.AsyncResult __iresult)
        throws FocalLengthOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __setFocalLength_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(FocalLengthOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __setFocalLength_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Laboratory.VariableFocalLenCameraPrx __proxy = (Laboratory.VariableFocalLenCameraPrx)__result.getProxy();
        try
        {
            __proxy.end_setFocalLength(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static VariableFocalLenCameraPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), VariableFocalLenCameraPrx.class, VariableFocalLenCameraPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static VariableFocalLenCameraPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), VariableFocalLenCameraPrx.class, VariableFocalLenCameraPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static VariableFocalLenCameraPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), VariableFocalLenCameraPrx.class, VariableFocalLenCameraPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static VariableFocalLenCameraPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), VariableFocalLenCameraPrx.class, VariableFocalLenCameraPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static VariableFocalLenCameraPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, VariableFocalLenCameraPrx.class, VariableFocalLenCameraPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static VariableFocalLenCameraPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, VariableFocalLenCameraPrx.class, VariableFocalLenCameraPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Laboratory::Camera",
        "::Laboratory::Device",
        "::Laboratory::VariableFocalLenCamera"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[3];
    }

    public static void __write(IceInternal.BasicStream __os, VariableFocalLenCameraPrx v)
    {
        __os.writeProxy(v);
    }

    public static VariableFocalLenCameraPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            VariableFocalLenCameraPrxHelper result = new VariableFocalLenCameraPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
