// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Laboratory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Laboratory;

/**
 * Provides type-specific helper functions.
 **/
public final class LabPrxHelper extends Ice.ObjectPrxHelperBase implements LabPrx
{
    private static final String __getAvailableFunctionsForDevice_name = "getAvailableFunctionsForDevice";

    public java.util.List<java.lang.String> getAvailableFunctionsForDevice(String device)
        throws DeviceNotExistException
    {
        return getAvailableFunctionsForDevice(device, null, false);
    }

    public java.util.List<java.lang.String> getAvailableFunctionsForDevice(String device, java.util.Map<String, String> __ctx)
        throws DeviceNotExistException
    {
        return getAvailableFunctionsForDevice(device, __ctx, true);
    }

    private java.util.List<java.lang.String> getAvailableFunctionsForDevice(String device, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws DeviceNotExistException
    {
        __checkTwowayOnly(__getAvailableFunctionsForDevice_name);
        return end_getAvailableFunctionsForDevice(begin_getAvailableFunctionsForDevice(device, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device)
    {
        return begin_getAvailableFunctionsForDevice(device, null, false, false, null);
    }

    public Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device, java.util.Map<String, String> __ctx)
    {
        return begin_getAvailableFunctionsForDevice(device, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device, Ice.Callback __cb)
    {
        return begin_getAvailableFunctionsForDevice(device, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAvailableFunctionsForDevice(device, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device, Callback_Lab_getAvailableFunctionsForDevice __cb)
    {
        return begin_getAvailableFunctionsForDevice(device, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device, java.util.Map<String, String> __ctx, Callback_Lab_getAvailableFunctionsForDevice __cb)
    {
        return begin_getAvailableFunctionsForDevice(device, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device, 
                                                                IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getAvailableFunctionsForDevice(device, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device, 
                                                                IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAvailableFunctionsForDevice(device, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device, 
                                                                java.util.Map<String, String> __ctx, 
                                                                IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getAvailableFunctionsForDevice(device, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device, 
                                                                java.util.Map<String, String> __ctx, 
                                                                IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAvailableFunctionsForDevice(device, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device, 
                                                                 java.util.Map<String, String> __ctx, 
                                                                 boolean __explicitCtx, 
                                                                 boolean __synchronous, 
                                                                 IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAvailableFunctionsForDevice(device, __ctx, __explicitCtx, __synchronous, 
                                                    new IceInternal.Functional_TwowayCallbackArg1UE<java.util.List<java.lang.String>>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                                        {
                                                            public final void __completed(Ice.AsyncResult __result)
                                                            {
                                                                LabPrxHelper.__getAvailableFunctionsForDevice_completed(this, __result);
                                                            }
                                                        });
    }

    private Ice.AsyncResult begin_getAvailableFunctionsForDevice(String device, 
                                                                 java.util.Map<String, String> __ctx, 
                                                                 boolean __explicitCtx, 
                                                                 boolean __synchronous, 
                                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAvailableFunctionsForDevice_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getAvailableFunctionsForDevice_name, __cb);
        try
        {
            __result.prepare(__getAvailableFunctionsForDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(device);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public java.util.List<java.lang.String> end_getAvailableFunctionsForDevice(Ice.AsyncResult __iresult)
        throws DeviceNotExistException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getAvailableFunctionsForDevice_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(DeviceNotExistException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            java.util.List<java.lang.String> __ret;
            __ret = StringListHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getAvailableFunctionsForDevice_completed(Ice.TwowayCallbackArg1UE<java.util.List<java.lang.String>> __cb, Ice.AsyncResult __result)
    {
        Laboratory.LabPrx __proxy = (Laboratory.LabPrx)__result.getProxy();
        java.util.List<java.lang.String> __ret = null;
        try
        {
            __ret = __proxy.end_getAvailableFunctionsForDevice(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getDevices_name = "getDevices";

    public java.util.List<java.lang.String> getDevices()
    {
        return getDevices(null, false);
    }

    public java.util.List<java.lang.String> getDevices(java.util.Map<String, String> __ctx)
    {
        return getDevices(__ctx, true);
    }

    private java.util.List<java.lang.String> getDevices(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getDevices_name);
        return end_getDevices(begin_getDevices(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getDevices()
    {
        return begin_getDevices(null, false, false, null);
    }

    public Ice.AsyncResult begin_getDevices(java.util.Map<String, String> __ctx)
    {
        return begin_getDevices(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getDevices(Ice.Callback __cb)
    {
        return begin_getDevices(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDevices(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDevices(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDevices(Callback_Lab_getDevices __cb)
    {
        return begin_getDevices(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDevices(java.util.Map<String, String> __ctx, Callback_Lab_getDevices __cb)
    {
        return begin_getDevices(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDevices(IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDevices(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDevices(IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDevices(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getDevices(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDevices(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDevices(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDevices(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getDevices(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<java.util.List<java.lang.String>> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDevices(__ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<java.util.List<java.lang.String>>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            LabPrxHelper.__getDevices_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_getDevices(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDevices_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getDevices_name, __cb);
        try
        {
            __result.prepare(__getDevices_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public java.util.List<java.lang.String> end_getDevices(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getDevices_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            java.util.List<java.lang.String> __ret;
            __ret = StringListHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getDevices_completed(Ice.TwowayCallbackArg1<java.util.List<java.lang.String>> __cb, Ice.AsyncResult __result)
    {
        Laboratory.LabPrx __proxy = (Laboratory.LabPrx)__result.getProxy();
        java.util.List<java.lang.String> __ret = null;
        try
        {
            __ret = __proxy.end_getDevices(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __releaseDevice_name = "releaseDevice";

    public void releaseDevice(String device, String username)
        throws DeviceNotControlledException,
               DeviceNotExistException
    {
        releaseDevice(device, username, null, false);
    }

    public void releaseDevice(String device, String username, java.util.Map<String, String> __ctx)
        throws DeviceNotControlledException,
               DeviceNotExistException
    {
        releaseDevice(device, username, __ctx, true);
    }

    private void releaseDevice(String device, String username, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws DeviceNotControlledException,
               DeviceNotExistException
    {
        __checkTwowayOnly(__releaseDevice_name);
        end_releaseDevice(begin_releaseDevice(device, username, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_releaseDevice(String device, String username)
    {
        return begin_releaseDevice(device, username, null, false, false, null);
    }

    public Ice.AsyncResult begin_releaseDevice(String device, String username, java.util.Map<String, String> __ctx)
    {
        return begin_releaseDevice(device, username, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_releaseDevice(String device, String username, Ice.Callback __cb)
    {
        return begin_releaseDevice(device, username, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_releaseDevice(String device, String username, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_releaseDevice(device, username, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_releaseDevice(String device, String username, Callback_Lab_releaseDevice __cb)
    {
        return begin_releaseDevice(device, username, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_releaseDevice(String device, String username, java.util.Map<String, String> __ctx, Callback_Lab_releaseDevice __cb)
    {
        return begin_releaseDevice(device, username, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_releaseDevice(String device, 
                                               String username, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_releaseDevice(device, username, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_releaseDevice(String device, 
                                               String username, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_releaseDevice(device, username, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_releaseDevice(String device, 
                                               String username, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_releaseDevice(device, username, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_releaseDevice(String device, 
                                               String username, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_releaseDevice(device, username, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_releaseDevice(String device, 
                                                String username, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_releaseDevice(device, username, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               LabPrxHelper.__releaseDevice_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_releaseDevice(String device, 
                                                String username, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__releaseDevice_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__releaseDevice_name, __cb);
        try
        {
            __result.prepare(__releaseDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(device);
            __os.writeString(username);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_releaseDevice(Ice.AsyncResult __iresult)
        throws DeviceNotControlledException,
               DeviceNotExistException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __releaseDevice_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(DeviceNotControlledException __ex)
                {
                    throw __ex;
                }
                catch(DeviceNotExistException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __releaseDevice_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Laboratory.LabPrx __proxy = (Laboratory.LabPrx)__result.getProxy();
        try
        {
            __proxy.end_releaseDevice(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __takeControlOverDevice_name = "takeControlOverDevice";

    public DevicePrx takeControlOverDevice(String device, String username)
        throws DeviceAlreadyControlledException,
               DeviceNotExistException
    {
        return takeControlOverDevice(device, username, null, false);
    }

    public DevicePrx takeControlOverDevice(String device, String username, java.util.Map<String, String> __ctx)
        throws DeviceAlreadyControlledException,
               DeviceNotExistException
    {
        return takeControlOverDevice(device, username, __ctx, true);
    }

    private DevicePrx takeControlOverDevice(String device, String username, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws DeviceAlreadyControlledException,
               DeviceNotExistException
    {
        __checkTwowayOnly(__takeControlOverDevice_name);
        return end_takeControlOverDevice(begin_takeControlOverDevice(device, username, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String device, String username)
    {
        return begin_takeControlOverDevice(device, username, null, false, false, null);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String device, String username, java.util.Map<String, String> __ctx)
    {
        return begin_takeControlOverDevice(device, username, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String device, String username, Ice.Callback __cb)
    {
        return begin_takeControlOverDevice(device, username, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String device, String username, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_takeControlOverDevice(device, username, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String device, String username, Callback_Lab_takeControlOverDevice __cb)
    {
        return begin_takeControlOverDevice(device, username, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String device, String username, java.util.Map<String, String> __ctx, Callback_Lab_takeControlOverDevice __cb)
    {
        return begin_takeControlOverDevice(device, username, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String device, 
                                                       String username, 
                                                       IceInternal.Functional_GenericCallback1<DevicePrx> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_takeControlOverDevice(device, username, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String device, 
                                                       String username, 
                                                       IceInternal.Functional_GenericCallback1<DevicePrx> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_takeControlOverDevice(device, username, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String device, 
                                                       String username, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<DevicePrx> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_takeControlOverDevice(device, username, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String device, 
                                                       String username, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<DevicePrx> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_takeControlOverDevice(device, username, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_takeControlOverDevice(String device, 
                                                        String username, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.Functional_GenericCallback1<DevicePrx> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_takeControlOverDevice(device, username, __ctx, __explicitCtx, __synchronous, 
                                           new IceInternal.Functional_TwowayCallbackArg1UE<Laboratory.DevicePrx>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                               {
                                                   public final void __completed(Ice.AsyncResult __result)
                                                   {
                                                       LabPrxHelper.__takeControlOverDevice_completed(this, __result);
                                                   }
                                               });
    }

    private Ice.AsyncResult begin_takeControlOverDevice(String device, 
                                                        String username, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__takeControlOverDevice_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__takeControlOverDevice_name, __cb);
        try
        {
            __result.prepare(__takeControlOverDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(device);
            __os.writeString(username);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public DevicePrx end_takeControlOverDevice(Ice.AsyncResult __iresult)
        throws DeviceAlreadyControlledException,
               DeviceNotExistException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __takeControlOverDevice_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(DeviceAlreadyControlledException __ex)
                {
                    throw __ex;
                }
                catch(DeviceNotExistException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            DevicePrx __ret;
            __ret = DevicePrxHelper.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __takeControlOverDevice_completed(Ice.TwowayCallbackArg1UE<DevicePrx> __cb, Ice.AsyncResult __result)
    {
        Laboratory.LabPrx __proxy = (Laboratory.LabPrx)__result.getProxy();
        DevicePrx __ret = null;
        try
        {
            __ret = __proxy.end_takeControlOverDevice(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LabPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), LabPrx.class, LabPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LabPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), LabPrx.class, LabPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LabPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), LabPrx.class, LabPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LabPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), LabPrx.class, LabPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static LabPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, LabPrx.class, LabPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static LabPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, LabPrx.class, LabPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Laboratory::Lab"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, LabPrx v)
    {
        __os.writeProxy(v);
    }

    public static LabPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            LabPrxHelper result = new LabPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
